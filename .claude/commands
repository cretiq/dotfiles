# Claude Code Custom Commands

## /new-remapper [app_name]
**Description**: Research and plan integration of a new application into the unified keymap toggle system

**Purpose**: Thoroughly investigate how to add vim-style keymap switching (HJKL ↔ JKLÖ) support for any application

**Research Areas**:
- Application documentation and configuration methods
- Keybinding/hotkey configuration file locations and formats
- Vim-style navigation support or custom key mapping capabilities
- Installation detection methods
- Configuration backup and restore mechanisms
- Integration approach with existing keymap toggle system

**Investigation Process**:
1. **Documentation Research**: Use Context7 MCP and web search to find official documentation
2. **Configuration Discovery**: Locate config files, settings, and keybinding formats
3. **Navigation Analysis**: Determine how the app handles navigation keys (hjkl support)
4. **File System Investigation**: Find where the app stores settings on macOS
5. **Integration Planning**: Design the keymap manager script architecture
6. **Backup Strategy**: Plan configuration backup and restore functionality

**Output**: Comprehensive plan for creating `[app]-keymap-manager.sh` and integrating with main toggle system

**Example Usage**:
```
/new-remapper tmux
/new-remapper neovim
/new-remapper finder
/new-remapper firefox
```

**Research Methodology**:
- Extensive documentation review using Context7 MCP
- Web search for configuration guides and examples
- File system investigation for config locations
- Format analysis (JSON, TOML, XML, custom formats)
- Community best practices and user configurations
- Integration pattern analysis based on existing successful implementations

**Deliverable**: Complete implementation plan ready for user approval and execution